{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,aAAcC,SAASC,cAAc,SACrCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAiCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIPT,EAAKC,aAAagB,iBAAiB,UA1CnC,SAAkBC,GAChBA,EAAMC,iBACNC,QAAQC,IAAI,MAUd,SAA8BC,GAC5B,I,IAD8BC,EAAFD,EAAEC,WAAYC,EAAdF,EAAcE,KAAMC,EAApBH,EAAoBG,OACvCC,EAAW,EAAGA,EAAWD,EAAQC,GAAY,EAAG,CAEvDnB,EAAcmB,EADFC,OAAOJ,GAAcI,OAAOH,GAAQG,OAAOD,IAEpDE,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAAhC,GAASiC,OAAOC,QACd,uBAA4CC,OAAnBzB,EAAW,EAAE,QAAYyB,OAANxB,EAAM,M,IAGrDyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAAhC,GAASiC,OAAOI,QACd,sBAAyCF,OAAnBzB,EAAW,EAAE,QAAYyB,OAANxB,EAAM,M,KAdvD2B,CANgB,CACdb,WAAYvB,EAAKI,WAAWiC,MAC5Bb,KAAMxB,EAAKK,UAAUgC,MACrBZ,OAAQzB,EAAKM,YAAY+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  formAllInput: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  };\n\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  console.log(2544);\n  const options = {\n    startDelay: refs.delayInput.value,\n    step: refs.stepInput.value,\n    amount: refs.amountInput.value,\n  };\n\n  createBlockOfPromise(options);\n}\n\nfunction createBlockOfPromise({ startDelay, step, amount }) {\n  for (let position = 0; position < amount; position += 1) {\n    let delay = Number(startDelay) + Number(step) * Number(position);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position + 1} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position + 1} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.formAllInput.addEventListener('submit', onSubmit);\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","formAllInput","document","querySelector","delayInput","stepInput","amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","console","log","param1","startDelay","step","amount","position1","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createBlockOfPromise","value"],"version":3,"file":"03-promises.5e318569.js.map"}