{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,aAAcC,SAASC,cAAc,SACrCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAiCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbT,EAAKC,aAAagB,iBAAiB,UA1CnC,SAAkBC,GAChBA,EAAMC,iBACNC,QAAQC,IAAI,MAUd,UAA8BC,WAAEA,EAAUC,KAAEA,EAAIC,OAAEA,IAChD,IAAK,IAAIC,EAAW,EAAGA,EAAWD,EAAQC,GAAY,EAAG,CAEvDlB,EAAckB,EADFC,OAAOJ,GAAcI,OAAOH,GAAQG,OAAOD,IAEpDE,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBtB,EAAY,QAASC,MAAU,IAGvDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBmB,EAAA9B,GAAS+B,OAAOG,QACd,sBAAoBxB,EAAU,QAASC,MAAU,G,EAdzDwB,CANgB,CACdX,WAAYtB,EAAKI,WAAW8B,MAC5BX,KAAMvB,EAAKK,UAAU6B,MACrBV,OAAQxB,EAAKM,YAAY4B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  formAllInput: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  };\n\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  console.log(2544);\n  const options = {\n    startDelay: refs.delayInput.value,\n    step: refs.stepInput.value,\n    amount: refs.amountInput.value,\n  };\n\n  createBlockOfPromise(options);\n}\n\nfunction createBlockOfPromise({ startDelay, step, amount }) {\n  for (let position = 0; position < amount; position += 1) {\n    let delay = Number(startDelay) + Number(step) * Number(position);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position + 1} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position + 1} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.formAllInput.addEventListener('submit', onSubmit);\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","formAllInput","document","querySelector","delayInput","stepInput","amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","console","log","startDelay","step","amount","position1","Number","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createBlockOfPromise","value"],"version":3,"file":"03-promises.addeccbb.js.map"}